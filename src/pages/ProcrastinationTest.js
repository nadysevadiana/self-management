import React, { useState } from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import "../App.css";
import "./Test.css";

const ProcrastinationTest = () => {
  const sections = {
    "–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á": [
      "–Ø —á–∞—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ—Ç–æ–º.",
      "–Ø –Ω–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç.",
      "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤–∞–∂–Ω—ã–º –¥–µ–ª–∞–º.",
      "–Ø –æ—Ç–≤–ª–µ–∫–∞—é—Å—å –Ω–∞ –¥—Ä—É–≥–∏–µ, –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
      "–ß–µ–º —Å–ª–æ–∂–Ω–µ–µ –∑–∞–¥–∞—á–∞, —Ç–µ–º –¥–æ–ª—å—à–µ —è –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
    ],
    "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏": [
      "–Ø —á–∞—Å—Ç–æ —Ç—Ä–∞—á—É –≤—Ä–µ–º—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.",
      "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è.",
      "–Ø –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–ª–∞ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–æ—Ä–∫–∞, –∑–≤–æ–Ω–∫–∏).",
      "–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π, —è —Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–±–µ–≥–∞—Ç—å –µ—ë.",
      "–Ø –æ–±–µ—â–∞—é —Å–µ–±–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å ¬´–∑–∞–≤—Ç—Ä–∞¬ª, –Ω–æ –Ω–µ –¥–µ–ª–∞—é —ç—Ç–æ–≥–æ."
    ],
    "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é": [
      "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∑–∞ —Ç–æ, —á—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –¥–µ–ª–∞.",
      "–ò–∑-–∑–∞ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏ —è —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Å—Ç—Ä–µ—Å—Å.",
      "–Ø –±–æ—é—Å—å –Ω–µ —É—Å–ø–µ—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å—Ä–æ–∫.",
      "–ß–µ–º –±–æ–ª—å—à–µ —è –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –∑–∞–¥–∞—á—É, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ –º–Ω–µ –∑–∞ –Ω–µ—ë –≤–∑—è—Ç—å—Å—è.",
      "–ö–æ–≥–¥–∞ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞—á–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç, —è –∏—Å–ø—ã—Ç—ã–≤–∞—é –ø–∞–Ω–∏–∫—É –∏ —Å—Ç—Ä–µ—Å—Å."
    ]
  };

  const totalQuestions = Object.values(sections).flat().length;

  const [answers, setAnswers] = useState(() => {
    const saved = localStorage.getItem("procrastinationAnswers");
    return saved ? JSON.parse(saved) : {};
  });

  const [result, setResult] = useState(() => localStorage.getItem("procrastinationResult") || null);
  const [showError, setShowError] = useState(false);

  const handleAnswerChange = (questionIndex, value) => {
    const updatedAnswers = { ...answers, [questionIndex]: value };
    setAnswers(updatedAnswers);
    setResult(null);
    setShowError(false);
    localStorage.setItem("procrastinationAnswers", JSON.stringify(updatedAnswers));
  };

  const calculateScore = () => {
    return Object.values(answers).reduce((acc, val) => acc + parseInt(val), 0);
  };

  const getResultText = (score) => {
    if (score >= 60)
      return "üî• –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –º–µ—Ç–æ–¥—ã –±–æ—Ä—å–±—ã —Å –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ–º –¥–µ–ª.";
    if (score >= 40)
      return "‚ö° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏. –í—ã —á–∞—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –¥–µ–ª–∞, –Ω–æ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —ç—Ç–∏–º.";
    if (score >= 25)
      return "‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏. –ò–Ω–æ–≥–¥–∞ –≤—ã –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É–µ—Ç–µ, –Ω–æ –≤ —Ü–µ–ª–æ–º —É–º–µ–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.";
    return "üèÜ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è. –í—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –∑–∞–¥–∞—á–∞–º–∏.";
  };

  const handleSubmit = () => {
    if (Object.keys(answers).length < totalQuestions) {
      setShowError(true);
      return;
    }

    const score = calculateScore();
    const finalResult = `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –±–∞–ª–ª–æ–≤. ${getResultText(score)}`;
    setResult(finalResult);
    localStorage.setItem("procrastinationResult", finalResult);
  };

  const copyResultToClipboard = () => {
    if (result) {
      navigator.clipboard.writeText(result);
      alert("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
    }
  };

  return (
    <motion.div className="test-page" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="test-header-card">
        <Link to="/tests" className="back-button">‚Üê –ù–∞–∑–∞–¥</Link>
        <h2 className="test-title">üïí –¢–µ—Å—Ç: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏</h2>
        <p className="test-subtitle">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞—è —Å—Ç–µ–ø–µ–Ω—å —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç 1 –¥–æ 5.</p>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="progress-bar">
        <div
          className="progress-fill"
          style={{ width: `${(Object.keys(answers).length / totalQuestions) * 100}%` }}
        ></div>
      </div>

      {showError && <p className="error-message">‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.</p>}

      {/* –í–æ–ø—Ä–æ—Å—ã */}
      <div className="test-grid-layout">
        {Object.entries(sections).map(([sectionTitle, questions], sectionIndex) => (
          <div key={sectionIndex} className="test-section">
            <h3 className="section-heading">{sectionTitle}</h3>
            {questions.map((question, questionIndex) => {
              const globalIndex =
                Object.values(sections)
                  .slice(0, sectionIndex)
                  .flat().length + questionIndex;

              return (
                <div key={globalIndex} className="question-box">
                  <p className="question-text">{globalIndex + 1}. {question}</p>
                  <div className="scale-options">
                    {[
                      { value: 1, label: "–°–æ–≤—Å–µ–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω" },
                      { value: 2, label: "–°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω" },
                      { value: 3, label: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ" },
                      { value: 4, label: "–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω" },
                      { value: 5, label: "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω" }
                    ].map(({ value, label }) => (
                      <label
                        key={value}
                        className={`scale-label full ${answers[globalIndex] === value ? "selected" : ""}`}
                      >
                        <input
                          type="radio"
                          name={`q${globalIndex}`}
                          value={value}
                          onChange={() => handleAnswerChange(globalIndex, value)}
                        />
                        <span className="label">{label}</span>
                      </label>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
      <div className="submit-container">
        <motion.button
          type="button"
          className="primary-button"
          onClick={handleSubmit}
          whileHover={{ scale: 1.05 }}
        >
          üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        </motion.button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {result && (
        <motion.div
          className="result-card"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h3 className="result-text">{result}</h3>
          <button onClick={copyResultToClipboard} className="copy-result-button">
            üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          </button>
        </motion.div>
      )}
    </motion.div>
  );
};

export default ProcrastinationTest;
