import React, { useState } from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import "../App.css";

const ChronotypeTest = () => {
  const sections = {
    "–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è": [
      ["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –±–µ–∑ –±—É–¥–∏–ª—å–Ω–∏–∫–∞?", ["A) –î–æ 6:00", "B) 6:00‚Äì8:00", "C) –ü–æ—Å–ª–µ 8:00"]],
      ["–ö–∞–∫ –ª–µ–≥–∫–æ –≤–∞–º –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Ä–∞–Ω–æ —É—Ç—Ä–æ–º?", ["A) –û—á–µ–Ω—å –ª–µ–≥–∫–æ, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±–æ–¥—Ä—ã–º.", "B) –ù–µ –≤—Å–µ–≥–¥–∞ –ª–µ–≥–∫–æ, –Ω–æ –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äì –º–æ–≥—É.", "C) –û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º."]]
    ],
    "–ü–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": [
      ["–ö–æ–≥–¥–∞ —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å?", ["A) –£—Ç—Ä–æ–º (–¥–æ 12:00)", "B) –î–Ω–µ–º (12:00‚Äì18:00)", "C) –í–µ—á–µ—Ä–æ–º (–ø–æ—Å–ª–µ 18:00)"]],
      ["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –ª–µ–≥—á–µ –≤—Å–µ–≥–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö?", ["A) –í —Ä–∞–Ω–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã", "B) –ë–ª–∏–∂–µ –∫ –æ–±–µ–¥—É", "C) –í–µ—á–µ—Ä–æ–º"]],
      ["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å?", ["A) –í–µ—á–µ—Ä–æ–º", "B) –î–Ω–µ–º", "C) –£—Ç—Ä–æ–º"]]
    ],
    "–≠–Ω–µ—Ä–≥–∏—è –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å": [
      ["–ö–∞–∫ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?", ["A) –ë–æ–¥—Ä –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è, –∫ –≤–µ—á–µ—Ä—É —É—Å—Ç–∞—é.", "B) –≠–Ω–µ—Ä–≥–∏—è —Ä–æ–≤–Ω–∞—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.", "C) –£—Ç—Ä–æ–º —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–µ—á–µ—Ä–æ–º –ø—Ä–∏—Ö–æ–∂—É –≤ —Ç–æ–Ω—É—Å."]],
      ["–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∞–±–æ—Ç–µ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º?", ["A) –ù–µ –ª—é–±–ª—é, —Å—Ç–∞—Ä–∞—é—Å—å –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.", "B) –ú–æ–≥—É, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ–Ω.", "C) –õ—é–±–ª—é, —á—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —Å–∏–ª."]]
    ],
    "–û—Ç–¥—ã—Ö –∏ —Å–æ–Ω": [
      ["–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å?", ["A) –î–æ 22:00", "B) 22:00‚Äì00:00", "C) –ü–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏"]],
      ["–ö–∞–∫ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø–æ—Å–ª–µ 7-8 —á–∞—Å–æ–≤ —Å–Ω–∞?", ["A) –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–æ—Ö–Ω—É–≤—à–∏–º.", "B) –ò–Ω–æ–≥–¥–∞ —É—Å—Ç–∞–ª—ã–º, –∏–Ω–æ–≥–¥–∞ –±–æ–¥—Ä—ã–º.", "C) –í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–≤—à–∏–º."]]
    ]
  };

  const totalQuestions = Object.values(sections).flat().length;
  const [answers, setAnswers] = useState({});
  const [result, setResult] = useState(null);
  const [showError, setShowError] = useState(false);

  const handleAnswerChange = (index, value) => {
    setAnswers(prev => ({ ...prev, [index]: value }));
    setResult(null);
    setShowError(false);
  };

  const calculateChronotypeScore = () => {
    if (Object.keys(answers).length < totalQuestions) {
      setShowError(true);
      return;
    }

    const score = Object.values(answers).reduce((acc, val) => acc + parseInt(val), 0);
    let resultText =
      score >= 21 ? "‚òÄÔ∏è –ñ–∞–≤–æ—Ä–æ–Ω–æ–∫ ‚Äì –≤–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —É—Ç—Ä–æ–º." :
      score >= 14 ? "üå§ –ì–æ–ª—É–±—å ‚Äì —É –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Ç–º." :
      "üåô –°–æ–≤–∞ ‚Äì –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç –∫ –≤–µ—á–µ—Ä—É.";

    setResult(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –±–∞–ª–ª–æ–≤. ${resultText}`);
  };

  return (
    <motion.div className="test-page" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
      <div className="test-header-card">
        <Link to="/tests" className="back-button">‚Üê –ù–∞–∑–∞–¥</Link>
        <h2 className="test-title">üïí –¢–µ—Å—Ç: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö—Ä–æ–Ω–æ—Ç–∏–ø–∞</h2>
        <p className="test-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.</p>
      </div>

      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${(Object.keys(answers).length / totalQuestions) * 100}%` }}></div>
      </div>

      {showError && <p className="error-message">‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.</p>}

      <div className="test-grid-layout">
        {Object.entries(sections).map(([section, questions], sectionIndex) => (
          <div key={sectionIndex} className="test-section">
            <h3 className="section-heading">{section}</h3>
            {questions.map(([question, options], questionIndex) => {
              const globalIndex = Object.values(sections).slice(0, sectionIndex).flat().length + questionIndex;
              return (
                <div key={globalIndex} className="question-box">
                  <p className="question-text">{globalIndex + 1}. {question}</p>
                  <div className="scale-options-column">
                    {options.map((option, i) => (
                      <div key={i} className="option-row">
                        <label
                          className={`scale-label ${answers[globalIndex] === 3 - i ? 'selected' : ''}`}
                        >
                          <input
                            type="radio"
                            name={`q${globalIndex}`}
                            value={3 - i}
                            onChange={() => handleAnswerChange(globalIndex, 3 - i)}
                          />
                          <span>{option}</span>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        ))}
      </div>

      <div className="submit-container">
        <motion.button type="button" className="primary-button" onClick={calculateChronotypeScore} whileHover={{ scale: 1.05 }}>
          üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        </motion.button>
      </div>

      {result && (
        <motion.div className="result-card" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
          <h3 className="result-text">{result}</h3>
        </motion.div>
      )}
    </motion.div>
  );
};

export default ChronotypeTest;